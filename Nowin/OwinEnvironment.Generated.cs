// Autogenerated. Do not edit.

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.Threading;
using System.Threading.Tasks;

namespace Nowin
{
    using WebSocketAccept = Action<IDictionary<string, object>, Func<IDictionary<string, object>, Task>>;

    internal partial class OwinEnvironment
    {
        UInt32 _flag0;
        UInt32 _initFlag0;

        object _OwinVersion;
        object _CallCancelled;
        object _RequestProtocol;
        object _RequestMethod;
        object _RequestScheme;
        object _RequestPathBase;
        object _RequestPath;
        object _RequestQueryString;
        object _RequestHeaders;
        object _RequestBody;
        object _ResponseStatusCode;
        object _ResponseReasonPhrase;
        object _ResponseHeaders;
        object _ResponseBody;
        object _ServerCapabilities;
        object _OnSendingHeaders;
        object _ServerRemoteIpAddress;
        object _ServerRemotePort;
        object _ServerLocalIpAddress;
        object _ServerLocalPort;
        object _ServerIsLocal;
        object _WebSocketAcceptFunc;

		void PropertiesReset()
		{
		    _flag0 = 0x3fffffu;
			_initFlag0 = 0x3fffffu;
		     _OwinVersion = null;
		     _CallCancelled = null;
		     _RequestProtocol = null;
		     _RequestMethod = null;
		     _RequestScheme = null;
		     _RequestPathBase = null;
		     _RequestPath = null;
		     _RequestQueryString = null;
		     _RequestHeaders = null;
		     _RequestBody = null;
		     _ResponseStatusCode = null;
		     _ResponseReasonPhrase = null;
		     _ResponseHeaders = null;
		     _ResponseBody = null;
		     _ServerCapabilities = null;
		     _OnSendingHeaders = null;
		     _ServerRemoteIpAddress = null;
		     _ServerRemotePort = null;
		     _ServerLocalIpAddress = null;
		     _ServerLocalPort = null;
		     _ServerIsLocal = null;
		     _WebSocketAcceptFunc = null;
		}

        internal object OwinVersion
        {
            get
            {
                if (((_initFlag0 & 0x1u) != 0))
                {
                    _OwinVersion = "1.0";
                    _initFlag0 &= ~0x1u;
                }
                return _OwinVersion;
            }
            set
            {
                _initFlag0 &= ~0x1u;
                _flag0 |= 0x1u;
                _OwinVersion = value;
            }
        }

		internal void RemoveOwinVersion()
		{
            _flag0 &= ~0x1u;
		}

        internal object CallCancelled
        {
            get
            {
                if (((_initFlag0 & 0x2u) != 0))
                {
                    _CallCancelled = _callback.CallCancelled;
                    _initFlag0 &= ~0x2u;
                }
                return _CallCancelled;
            }
            set
            {
                _initFlag0 &= ~0x2u;
                _flag0 |= 0x2u;
                _CallCancelled = value;
            }
        }

		internal void RemoveCallCancelled()
		{
            _flag0 &= ~0x2u;
		}

        internal object RequestProtocol
        {
            get
            {
                if (((_initFlag0 & 0x4u) != 0))
                {
                    _RequestProtocol = _callback.RequestProtocol;
                    _initFlag0 &= ~0x4u;
                }
                return _RequestProtocol;
            }
            set
            {
                _initFlag0 &= ~0x4u;
                _flag0 |= 0x4u;
                _RequestProtocol = value;
            }
        }

		internal void RemoveRequestProtocol()
		{
            _flag0 &= ~0x4u;
		}

        internal object RequestMethod
        {
            get
            {
                if (((_initFlag0 & 0x8u) != 0))
                {
                    _RequestMethod = _callback.RequestMethod;
                    _initFlag0 &= ~0x8u;
                }
                return _RequestMethod;
            }
            set
            {
                _initFlag0 &= ~0x8u;
                _flag0 |= 0x8u;
                _RequestMethod = value;
            }
        }

		internal void RemoveRequestMethod()
		{
            _flag0 &= ~0x8u;
		}

        internal object RequestScheme
        {
            get
            {
                if (((_initFlag0 & 0x10u) != 0))
                {
                    _RequestScheme = _callback.RequestScheme;
                    _initFlag0 &= ~0x10u;
                }
                return _RequestScheme;
            }
            set
            {
                _initFlag0 &= ~0x10u;
                _flag0 |= 0x10u;
                _RequestScheme = value;
            }
        }

		internal void RemoveRequestScheme()
		{
            _flag0 &= ~0x10u;
		}

        internal object RequestPathBase
        {
            get
            {
                if (((_initFlag0 & 0x20u) != 0))
                {
                    _RequestPathBase = "";
                    _initFlag0 &= ~0x20u;
                }
                return _RequestPathBase;
            }
            set
            {
                _initFlag0 &= ~0x20u;
                _flag0 |= 0x20u;
                _RequestPathBase = value;
            }
        }

		internal void RemoveRequestPathBase()
		{
            _flag0 &= ~0x20u;
		}

        internal object RequestPath
        {
            get
            {
                if (((_initFlag0 & 0x40u) != 0))
                {
                    _RequestPath = _callback.RequestPath;
                    _initFlag0 &= ~0x40u;
                }
                return _RequestPath;
            }
            set
            {
                _initFlag0 &= ~0x40u;
                _flag0 |= 0x40u;
                _RequestPath = value;
            }
        }

		internal void RemoveRequestPath()
		{
            _flag0 &= ~0x40u;
		}

        internal object RequestQueryString
        {
            get
            {
                if (((_initFlag0 & 0x80u) != 0))
                {
                    _RequestQueryString = _callback.RequestQueryString;
                    _initFlag0 &= ~0x80u;
                }
                return _RequestQueryString;
            }
            set
            {
                _initFlag0 &= ~0x80u;
                _flag0 |= 0x80u;
                _RequestQueryString = value;
            }
        }

		internal void RemoveRequestQueryString()
		{
            _flag0 &= ~0x80u;
		}

        internal object RequestHeaders
        {
            get
            {
                if (((_initFlag0 & 0x100u) != 0))
                {
                    _RequestHeaders = _handler.ReqHeaders;
                    _initFlag0 &= ~0x100u;
                }
                return _RequestHeaders;
            }
            set
            {
                _initFlag0 &= ~0x100u;
                _flag0 |= 0x100u;
                _RequestHeaders = value;
            }
        }

		internal void RemoveRequestHeaders()
		{
            _flag0 &= ~0x100u;
		}

        internal object RequestBody
        {
            get
            {
                if (((_initFlag0 & 0x200u) != 0))
                {
                    _RequestBody = _callback.ReqRespBody;
                    _initFlag0 &= ~0x200u;
                }
                return _RequestBody;
            }
            set
            {
                _initFlag0 &= ~0x200u;
                _flag0 |= 0x200u;
                _RequestBody = value;
            }
        }

		internal void RemoveRequestBody()
		{
            _flag0 &= ~0x200u;
		}

        internal object ResponseStatusCode
        {
            get
            {
                if (((_initFlag0 & 0x400u) != 0))
                {
                    _ResponseStatusCode = 200;
                    _initFlag0 &= ~0x400u;
                }
                return _ResponseStatusCode;
            }
            set
            {
                _initFlag0 &= ~0x400u;
                _flag0 |= 0x400u;
                _ResponseStatusCode = value;
                _callback.ResponseStatusCode = (int) value;
            }
        }

		internal void RemoveResponseStatusCode()
		{
            _flag0 &= ~0x400u;
		}

        internal object ResponseReasonPhrase
        {
            get
            {
                if (((_initFlag0 & 0x800u) != 0))
                {
                    _ResponseReasonPhrase = null;
                    _initFlag0 &= ~0x800u;
                }
                return _ResponseReasonPhrase;
            }
            set
            {
                _initFlag0 &= ~0x800u;
                _flag0 |= 0x800u;
                _ResponseReasonPhrase = value;
                _callback.ResponseReasonPhase = (string) value;
            }
        }

		internal void RemoveResponseReasonPhrase()
		{
            _flag0 &= ~0x800u;
		}

        internal object ResponseHeaders
        {
            get
            {
                if (((_initFlag0 & 0x1000u) != 0))
                {
                    _ResponseHeaders = _handler.RespHeaders;
                    _initFlag0 &= ~0x1000u;
                }
                return _ResponseHeaders;
            }
            set
            {
                _initFlag0 &= ~0x1000u;
                _flag0 |= 0x1000u;
                _ResponseHeaders = value;
                _handler.OverwriteRespHeaders((IDictionary<string, string[]>) value);
            }
        }

		internal void RemoveResponseHeaders()
		{
            _flag0 &= ~0x1000u;
		}

        internal object ResponseBody
        {
            get
            {
                if (((_initFlag0 & 0x2000u) != 0))
                {
                    _ResponseBody = _callback.ReqRespBody;
                    _initFlag0 &= ~0x2000u;
                }
                return _ResponseBody;
            }
            set
            {
                _initFlag0 &= ~0x2000u;
                _flag0 |= 0x2000u;
                _ResponseBody = value;
            }
        }

		internal void RemoveResponseBody()
		{
            _flag0 &= ~0x2000u;
		}

        internal object ServerCapabilities
        {
            get
            {
                if (((_initFlag0 & 0x4000u) != 0))
                {
                    _ServerCapabilities = _handler.Capabilities;
                    _initFlag0 &= ~0x4000u;
                }
                return _ServerCapabilities;
            }
            set
            {
                _initFlag0 &= ~0x4000u;
                _flag0 |= 0x4000u;
                _ServerCapabilities = value;
            }
        }

		internal void RemoveServerCapabilities()
		{
            _flag0 &= ~0x4000u;
		}

        internal object OnSendingHeaders
        {
            get
            {
                if (((_initFlag0 & 0x8000u) != 0))
                {
                    _OnSendingHeaders = _handler.OnSendingHeadersAction;
                    _initFlag0 &= ~0x8000u;
                }
                return _OnSendingHeaders;
            }
            set
            {
                _initFlag0 &= ~0x8000u;
                _flag0 |= 0x8000u;
                _OnSendingHeaders = value;
            }
        }

		internal void RemoveOnSendingHeaders()
		{
            _flag0 &= ~0x8000u;
		}

        internal object ServerRemoteIpAddress
        {
            get
            {
                if (((_initFlag0 & 0x10000u) != 0))
                {
                    _ServerRemoteIpAddress = _callback.RemoteIpAddress;
                    _initFlag0 &= ~0x10000u;
                }
                return _ServerRemoteIpAddress;
            }
            set
            {
                _initFlag0 &= ~0x10000u;
                _flag0 |= 0x10000u;
                _ServerRemoteIpAddress = value;
            }
        }

		internal void RemoveServerRemoteIpAddress()
		{
            _flag0 &= ~0x10000u;
		}

        internal object ServerRemotePort
        {
            get
            {
                if (((_initFlag0 & 0x20000u) != 0))
                {
                    _ServerRemotePort = _callback.RemotePort;
                    _initFlag0 &= ~0x20000u;
                }
                return _ServerRemotePort;
            }
            set
            {
                _initFlag0 &= ~0x20000u;
                _flag0 |= 0x20000u;
                _ServerRemotePort = value;
            }
        }

		internal void RemoveServerRemotePort()
		{
            _flag0 &= ~0x20000u;
		}

        internal object ServerLocalIpAddress
        {
            get
            {
                if (((_initFlag0 & 0x40000u) != 0))
                {
                    _ServerLocalIpAddress = _callback.LocalIpAddress;
                    _initFlag0 &= ~0x40000u;
                }
                return _ServerLocalIpAddress;
            }
            set
            {
                _initFlag0 &= ~0x40000u;
                _flag0 |= 0x40000u;
                _ServerLocalIpAddress = value;
            }
        }

		internal void RemoveServerLocalIpAddress()
		{
            _flag0 &= ~0x40000u;
		}

        internal object ServerLocalPort
        {
            get
            {
                if (((_initFlag0 & 0x80000u) != 0))
                {
                    _ServerLocalPort = _callback.LocalPort;
                    _initFlag0 &= ~0x80000u;
                }
                return _ServerLocalPort;
            }
            set
            {
                _initFlag0 &= ~0x80000u;
                _flag0 |= 0x80000u;
                _ServerLocalPort = value;
            }
        }

		internal void RemoveServerLocalPort()
		{
            _flag0 &= ~0x80000u;
		}

        internal object ServerIsLocal
        {
            get
            {
                if (((_initFlag0 & 0x100000u) != 0))
                {
                    _ServerIsLocal = _callback.IsLocal;
                    _initFlag0 &= ~0x100000u;
                }
                return _ServerIsLocal;
            }
            set
            {
                _initFlag0 &= ~0x100000u;
                _flag0 |= 0x100000u;
                _ServerIsLocal = value;
            }
        }

		internal void RemoveServerIsLocal()
		{
            _flag0 &= ~0x100000u;
		}

        internal object WebSocketAcceptFunc
        {
            get
            {
                if (((_initFlag0 & 0x200000u) != 0))
                {
                    _WebSocketAcceptFunc = _handler.WebSocketAcceptFunc;
                    _initFlag0 &= ~0x200000u;
                }
                return _WebSocketAcceptFunc;
            }
            set
            {
                _initFlag0 &= ~0x200000u;
                _flag0 |= 0x200000u;
                _WebSocketAcceptFunc = value;
            }
        }

		internal void RemoveWebSocketAcceptFunc()
		{
            _flag0 &= ~0x200000u;
		}

        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
                case 12:
                    if (((_flag0 & 0x1u) != 0) && key=="owin.Version")
                    {
                        return true;
                    }
                   break;
                case 18:
                    if (((_flag0 & 0x2u) != 0) && key=="owin.CallCancelled")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x8u) != 0) && key=="owin.RequestMethod")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x10u) != 0) && key=="owin.RequestScheme")
                    {
                        return true;
                    }
                   break;
                case 20:
                    if (((_flag0 & 0x4u) != 0) && key=="owin.RequestProtocol")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x20u) != 0) && key=="owin.RequestPathBase")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x1000u) != 0) && key=="owin.ResponseHeaders")
                    {
                        return true;
                    }
                   break;
                case 16:
                    if (((_flag0 & 0x40u) != 0) && key=="owin.RequestPath")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x200u) != 0) && key=="owin.RequestBody")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x80000u) != 0) && key=="server.LocalPort")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x200000u) != 0) && key=="websocket.Accept")
                    {
                        return true;
                    }
                   break;
                case 23:
                    if (((_flag0 & 0x80u) != 0) && key=="owin.RequestQueryString")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x400u) != 0) && key=="owin.ResponseStatusCode")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x8000u) != 0) && key=="server.OnSendingHeaders")
                    {
                        return true;
                    }
                   break;
                case 19:
                    if (((_flag0 & 0x100u) != 0) && key=="owin.RequestHeaders")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x4000u) != 0) && key=="server.Capabilities")
                    {
                        return true;
                    }
                   break;
                case 25:
                    if (((_flag0 & 0x800u) != 0) && key=="owin.ResponseReasonPhrase")
                    {
                        return true;
                    }
                   break;
                case 17:
                    if (((_flag0 & 0x2000u) != 0) && key=="owin.ResponseBody")
                    {
                        return true;
                    }
                    if (((_flag0 & 0x20000u) != 0) && key=="server.RemotePort")
                    {
                        return true;
                    }
                   break;
                case 22:
                    if (((_flag0 & 0x10000u) != 0) && key=="server.RemoteIpAddress")
                    {
                        return true;
                    }
                   break;
                case 21:
                    if (((_flag0 & 0x40000u) != 0) && key=="server.LocalIpAddress")
                    {
                        return true;
                    }
                   break;
                case 14:
                    if (((_flag0 & 0x100000u) != 0) && key=="server.IsLocal")
                    {
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out object value)
        {
            switch (key.Length)
            {
                case 12:
                    if (((_flag0 & 0x1u) != 0) && key=="owin.Version")
                    {
                        value = OwinVersion;
                        return true;
                    }
                   break;
                case 18:
                    if (((_flag0 & 0x2u) != 0) && key=="owin.CallCancelled")
                    {
                        value = CallCancelled;
                        return true;
                    }
                    if (((_flag0 & 0x8u) != 0) && key=="owin.RequestMethod")
                    {
                        value = RequestMethod;
                        return true;
                    }
                    if (((_flag0 & 0x10u) != 0) && key=="owin.RequestScheme")
                    {
                        value = RequestScheme;
                        return true;
                    }
                   break;
                case 20:
                    if (((_flag0 & 0x4u) != 0) && key=="owin.RequestProtocol")
                    {
                        value = RequestProtocol;
                        return true;
                    }
                    if (((_flag0 & 0x20u) != 0) && key=="owin.RequestPathBase")
                    {
                        value = RequestPathBase;
                        return true;
                    }
                    if (((_flag0 & 0x1000u) != 0) && key=="owin.ResponseHeaders")
                    {
                        value = ResponseHeaders;
                        return true;
                    }
                   break;
                case 16:
                    if (((_flag0 & 0x40u) != 0) && key=="owin.RequestPath")
                    {
                        value = RequestPath;
                        return true;
                    }
                    if (((_flag0 & 0x200u) != 0) && key=="owin.RequestBody")
                    {
                        value = RequestBody;
                        return true;
                    }
                    if (((_flag0 & 0x80000u) != 0) && key=="server.LocalPort")
                    {
                        value = ServerLocalPort;
                        return true;
                    }
                    if (((_flag0 & 0x200000u) != 0) && key=="websocket.Accept")
                    {
                        value = WebSocketAcceptFunc;
                        return true;
                    }
                   break;
                case 23:
                    if (((_flag0 & 0x80u) != 0) && key=="owin.RequestQueryString")
                    {
                        value = RequestQueryString;
                        return true;
                    }
                    if (((_flag0 & 0x400u) != 0) && key=="owin.ResponseStatusCode")
                    {
                        value = ResponseStatusCode;
                        return true;
                    }
                    if (((_flag0 & 0x8000u) != 0) && key=="server.OnSendingHeaders")
                    {
                        value = OnSendingHeaders;
                        return true;
                    }
                   break;
                case 19:
                    if (((_flag0 & 0x100u) != 0) && key=="owin.RequestHeaders")
                    {
                        value = RequestHeaders;
                        return true;
                    }
                    if (((_flag0 & 0x4000u) != 0) && key=="server.Capabilities")
                    {
                        value = ServerCapabilities;
                        return true;
                    }
                   break;
                case 25:
                    if (((_flag0 & 0x800u) != 0) && key=="owin.ResponseReasonPhrase")
                    {
                        value = ResponseReasonPhrase;
                        return true;
                    }
                   break;
                case 17:
                    if (((_flag0 & 0x2000u) != 0) && key=="owin.ResponseBody")
                    {
                        value = ResponseBody;
                        return true;
                    }
                    if (((_flag0 & 0x20000u) != 0) && key=="server.RemotePort")
                    {
                        value = ServerRemotePort;
                        return true;
                    }
                   break;
                case 22:
                    if (((_flag0 & 0x10000u) != 0) && key=="server.RemoteIpAddress")
                    {
                        value = ServerRemoteIpAddress;
                        return true;
                    }
                   break;
                case 21:
                    if (((_flag0 & 0x40000u) != 0) && key=="server.LocalIpAddress")
                    {
                        value = ServerLocalIpAddress;
                        return true;
                    }
                   break;
                case 14:
                    if (((_flag0 & 0x100000u) != 0) && key=="server.IsLocal")
                    {
                        value = ServerIsLocal;
                        return true;
                    }
                   break;
            }
            value = null;
            return false;
        }

        private bool PropertiesTrySetValue(string key, object value)
        {
            switch (key.Length)
            {
                case 12:
                    if (key=="owin.Version")
                    {
                        OwinVersion = value;
                        return true;
                    }
                   break;
                case 18:
                    if (key=="owin.CallCancelled")
                    {
                        CallCancelled = value;
                        return true;
                    }
                    if (key=="owin.RequestMethod")
                    {
                        RequestMethod = value;
                        return true;
                    }
                    if (key=="owin.RequestScheme")
                    {
                        RequestScheme = value;
                        return true;
                    }
                   break;
                case 20:
                    if (key=="owin.RequestProtocol")
                    {
                        RequestProtocol = value;
                        return true;
                    }
                    if (key=="owin.RequestPathBase")
                    {
                        RequestPathBase = value;
                        return true;
                    }
                    if (key=="owin.ResponseHeaders")
                    {
                        ResponseHeaders = value;
                        return true;
                    }
                   break;
                case 16:
                    if (key=="owin.RequestPath")
                    {
                        RequestPath = value;
                        return true;
                    }
                    if (key=="owin.RequestBody")
                    {
                        RequestBody = value;
                        return true;
                    }
                    if (key=="server.LocalPort")
                    {
                        ServerLocalPort = value;
                        return true;
                    }
                    if (key=="websocket.Accept")
                    {
                        WebSocketAcceptFunc = value;
                        return true;
                    }
                   break;
                case 23:
                    if (key=="owin.RequestQueryString")
                    {
                        RequestQueryString = value;
                        return true;
                    }
                    if (key=="owin.ResponseStatusCode")
                    {
                        ResponseStatusCode = value;
                        return true;
                    }
                    if (key=="server.OnSendingHeaders")
                    {
                        OnSendingHeaders = value;
                        return true;
                    }
                   break;
                case 19:
                    if (key=="owin.RequestHeaders")
                    {
                        RequestHeaders = value;
                        return true;
                    }
                    if (key=="server.Capabilities")
                    {
                        ServerCapabilities = value;
                        return true;
                    }
                   break;
                case 25:
                    if (key=="owin.ResponseReasonPhrase")
                    {
                        ResponseReasonPhrase = value;
                        return true;
                    }
                   break;
                case 17:
                    if (key=="owin.ResponseBody")
                    {
                        ResponseBody = value;
                        return true;
                    }
                    if (key=="server.RemotePort")
                    {
                        ServerRemotePort = value;
                        return true;
                    }
                   break;
                case 22:
                    if (key=="server.RemoteIpAddress")
                    {
                        ServerRemoteIpAddress = value;
                        return true;
                    }
                   break;
                case 21:
                    if (key=="server.LocalIpAddress")
                    {
                        ServerLocalIpAddress = value;
                        return true;
                    }
                   break;
                case 14:
                    if (key=="server.IsLocal")
                    {
                        ServerIsLocal = value;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
                case 12:
                    if (((_flag0 & 0x1u) != 0) && key=="owin.Version")
                    {
                        _flag0 &= ~0x1u;
                        _OwinVersion = null;
                        return true;
                    }
                   break;
                case 18:
                    if (((_flag0 & 0x2u) != 0) && key=="owin.CallCancelled")
                    {
                        _flag0 &= ~0x2u;
                        _CallCancelled = null;
                        return true;
                    }
                    if (((_flag0 & 0x8u) != 0) && key=="owin.RequestMethod")
                    {
                        _flag0 &= ~0x8u;
                        _RequestMethod = null;
                        return true;
                    }
                    if (((_flag0 & 0x10u) != 0) && key=="owin.RequestScheme")
                    {
                        _flag0 &= ~0x10u;
                        _RequestScheme = null;
                        return true;
                    }
                   break;
                case 20:
                    if (((_flag0 & 0x4u) != 0) && key=="owin.RequestProtocol")
                    {
                        _flag0 &= ~0x4u;
                        _RequestProtocol = null;
                        return true;
                    }
                    if (((_flag0 & 0x20u) != 0) && key=="owin.RequestPathBase")
                    {
                        _flag0 &= ~0x20u;
                        _RequestPathBase = null;
                        return true;
                    }
                    if (((_flag0 & 0x1000u) != 0) && key=="owin.ResponseHeaders")
                    {
                        _flag0 &= ~0x1000u;
                        _ResponseHeaders = null;
                        return true;
                    }
                   break;
                case 16:
                    if (((_flag0 & 0x40u) != 0) && key=="owin.RequestPath")
                    {
                        _flag0 &= ~0x40u;
                        _RequestPath = null;
                        return true;
                    }
                    if (((_flag0 & 0x200u) != 0) && key=="owin.RequestBody")
                    {
                        _flag0 &= ~0x200u;
                        _RequestBody = null;
                        return true;
                    }
                    if (((_flag0 & 0x80000u) != 0) && key=="server.LocalPort")
                    {
                        _flag0 &= ~0x80000u;
                        _ServerLocalPort = null;
                        return true;
                    }
                    if (((_flag0 & 0x200000u) != 0) && key=="websocket.Accept")
                    {
                        _flag0 &= ~0x200000u;
                        _WebSocketAcceptFunc = null;
                        return true;
                    }
                   break;
                case 23:
                    if (((_flag0 & 0x80u) != 0) && key=="owin.RequestQueryString")
                    {
                        _flag0 &= ~0x80u;
                        _RequestQueryString = null;
                        return true;
                    }
                    if (((_flag0 & 0x400u) != 0) && key=="owin.ResponseStatusCode")
                    {
                        _flag0 &= ~0x400u;
                        _ResponseStatusCode = null;
                        return true;
                    }
                    if (((_flag0 & 0x8000u) != 0) && key=="server.OnSendingHeaders")
                    {
                        _flag0 &= ~0x8000u;
                        _OnSendingHeaders = null;
                        return true;
                    }
                   break;
                case 19:
                    if (((_flag0 & 0x100u) != 0) && key=="owin.RequestHeaders")
                    {
                        _flag0 &= ~0x100u;
                        _RequestHeaders = null;
                        return true;
                    }
                    if (((_flag0 & 0x4000u) != 0) && key=="server.Capabilities")
                    {
                        _flag0 &= ~0x4000u;
                        _ServerCapabilities = null;
                        return true;
                    }
                   break;
                case 25:
                    if (((_flag0 & 0x800u) != 0) && key=="owin.ResponseReasonPhrase")
                    {
                        _flag0 &= ~0x800u;
                        _ResponseReasonPhrase = null;
                        return true;
                    }
                   break;
                case 17:
                    if (((_flag0 & 0x2000u) != 0) && key=="owin.ResponseBody")
                    {
                        _flag0 &= ~0x2000u;
                        _ResponseBody = null;
                        return true;
                    }
                    if (((_flag0 & 0x20000u) != 0) && key=="server.RemotePort")
                    {
                        _flag0 &= ~0x20000u;
                        _ServerRemotePort = null;
                        return true;
                    }
                   break;
                case 22:
                    if (((_flag0 & 0x10000u) != 0) && key=="server.RemoteIpAddress")
                    {
                        _flag0 &= ~0x10000u;
                        _ServerRemoteIpAddress = null;
                        return true;
                    }
                   break;
                case 21:
                    if (((_flag0 & 0x40000u) != 0) && key=="server.LocalIpAddress")
                    {
                        _flag0 &= ~0x40000u;
                        _ServerLocalIpAddress = null;
                        return true;
                    }
                   break;
                case 14:
                    if (((_flag0 & 0x100000u) != 0) && key=="server.IsLocal")
                    {
                        _flag0 &= ~0x100000u;
                        _ServerIsLocal = null;
                        return true;
                    }
                   break;
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
            if (((_flag0 & 0x1u) != 0))
            {
                yield return "owin.Version";
            }
            if (((_flag0 & 0x2u) != 0))
            {
                yield return "owin.CallCancelled";
            }
            if (((_flag0 & 0x4u) != 0))
            {
                yield return "owin.RequestProtocol";
            }
            if (((_flag0 & 0x8u) != 0))
            {
                yield return "owin.RequestMethod";
            }
            if (((_flag0 & 0x10u) != 0))
            {
                yield return "owin.RequestScheme";
            }
            if (((_flag0 & 0x20u) != 0))
            {
                yield return "owin.RequestPathBase";
            }
            if (((_flag0 & 0x40u) != 0))
            {
                yield return "owin.RequestPath";
            }
            if (((_flag0 & 0x80u) != 0))
            {
                yield return "owin.RequestQueryString";
            }
            if (((_flag0 & 0x100u) != 0))
            {
                yield return "owin.RequestHeaders";
            }
            if (((_flag0 & 0x200u) != 0))
            {
                yield return "owin.RequestBody";
            }
            if (((_flag0 & 0x400u) != 0))
            {
                yield return "owin.ResponseStatusCode";
            }
            if (((_flag0 & 0x800u) != 0))
            {
                yield return "owin.ResponseReasonPhrase";
            }
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return "owin.ResponseHeaders";
            }
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return "owin.ResponseBody";
            }
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return "server.Capabilities";
            }
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return "server.OnSendingHeaders";
            }
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return "server.RemoteIpAddress";
            }
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return "server.RemotePort";
            }
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return "server.LocalIpAddress";
            }
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return "server.LocalPort";
            }
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return "server.IsLocal";
            }
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return "websocket.Accept";
            }
        }

        private IEnumerable<object> PropertiesValues()
        {
            if (((_flag0 & 0x1u) != 0))
            {
                yield return OwinVersion;
            }
            if (((_flag0 & 0x2u) != 0))
            {
                yield return CallCancelled;
            }
            if (((_flag0 & 0x4u) != 0))
            {
                yield return RequestProtocol;
            }
            if (((_flag0 & 0x8u) != 0))
            {
                yield return RequestMethod;
            }
            if (((_flag0 & 0x10u) != 0))
            {
                yield return RequestScheme;
            }
            if (((_flag0 & 0x20u) != 0))
            {
                yield return RequestPathBase;
            }
            if (((_flag0 & 0x40u) != 0))
            {
                yield return RequestPath;
            }
            if (((_flag0 & 0x80u) != 0))
            {
                yield return RequestQueryString;
            }
            if (((_flag0 & 0x100u) != 0))
            {
                yield return RequestHeaders;
            }
            if (((_flag0 & 0x200u) != 0))
            {
                yield return RequestBody;
            }
            if (((_flag0 & 0x400u) != 0))
            {
                yield return ResponseStatusCode;
            }
            if (((_flag0 & 0x800u) != 0))
            {
                yield return ResponseReasonPhrase;
            }
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return ResponseHeaders;
            }
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return ResponseBody;
            }
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return ServerCapabilities;
            }
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return OnSendingHeaders;
            }
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return ServerRemoteIpAddress;
            }
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return ServerRemotePort;
            }
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return ServerLocalIpAddress;
            }
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return ServerLocalPort;
            }
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return ServerIsLocal;
            }
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return WebSocketAcceptFunc;
            }
        }

        private IEnumerable<KeyValuePair<string, object>> PropertiesEnumerable()
        {
            if (((_flag0 & 0x1u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.Version", OwinVersion);
            }
            if (((_flag0 & 0x2u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.CallCancelled", CallCancelled);
            }
            if (((_flag0 & 0x4u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestProtocol", RequestProtocol);
            }
            if (((_flag0 & 0x8u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestMethod", RequestMethod);
            }
            if (((_flag0 & 0x10u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestScheme", RequestScheme);
            }
            if (((_flag0 & 0x20u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestPathBase", RequestPathBase);
            }
            if (((_flag0 & 0x40u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestPath", RequestPath);
            }
            if (((_flag0 & 0x80u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestQueryString", RequestQueryString);
            }
            if (((_flag0 & 0x100u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestHeaders", RequestHeaders);
            }
            if (((_flag0 & 0x200u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.RequestBody", RequestBody);
            }
            if (((_flag0 & 0x400u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseStatusCode", ResponseStatusCode);
            }
            if (((_flag0 & 0x800u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseReasonPhrase", ResponseReasonPhrase);
            }
            if (((_flag0 & 0x1000u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseHeaders", ResponseHeaders);
            }
            if (((_flag0 & 0x2000u) != 0))
            {
                yield return new KeyValuePair<string, object>("owin.ResponseBody", ResponseBody);
            }
            if (((_flag0 & 0x4000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.Capabilities", ServerCapabilities);
            }
            if (((_flag0 & 0x8000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.OnSendingHeaders", OnSendingHeaders);
            }
            if (((_flag0 & 0x10000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.RemoteIpAddress", ServerRemoteIpAddress);
            }
            if (((_flag0 & 0x20000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.RemotePort", ServerRemotePort);
            }
            if (((_flag0 & 0x40000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.LocalIpAddress", ServerLocalIpAddress);
            }
            if (((_flag0 & 0x80000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.LocalPort", ServerLocalPort);
            }
            if (((_flag0 & 0x100000u) != 0))
            {
                yield return new KeyValuePair<string, object>("server.IsLocal", ServerIsLocal);
            }
            if (((_flag0 & 0x200000u) != 0))
            {
                yield return new KeyValuePair<string, object>("websocket.Accept", WebSocketAcceptFunc);
            }
        }
    }
}
