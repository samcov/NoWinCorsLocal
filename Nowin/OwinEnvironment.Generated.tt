<#@ template language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#
var props = new[]
{ 
// owin standard keys
  new {Key="owin.Version", Type="string", Name="OwinVersion", Get="\"1.0\"", Set="" },
  new {Key="owin.CallCancelled", Type="CancellationToken", Name="CallCancelled", Get="_callback.CallCancelled", Set="" },

  new {Key="owin.RequestProtocol", Type="string", Name="RequestProtocol", Get="_callback.RequestProtocol", Set="" },
  new {Key="owin.RequestMethod", Type="string", Name="RequestMethod", Get="_callback.RequestMethod", Set="" },
  new {Key="owin.RequestScheme", Type="string", Name="RequestScheme", Get="_callback.RequestScheme", Set="" },
  new {Key="owin.RequestPathBase", Type="string", Name="RequestPathBase", Get="\"\"", Set="" },
  new {Key="owin.RequestPath", Type="string", Name="RequestPath", Get="_callback.RequestPath", Set="" },
  new {Key="owin.RequestQueryString", Type="string", Name="RequestQueryString", Get="_callback.RequestQueryString", Set="" },
  new {Key="owin.RequestHeaders", Type="IDictionary<string, string[]>", Name="RequestHeaders", Get="_handler.ReqHeaders", Set="" },
  new {Key="owin.RequestBody", Type="Stream", Name="RequestBody", Get="_callback.ReqRespBody", Set="" },

  new {Key="owin.ResponseStatusCode", Type="int", Name="ResponseStatusCode", Get="200", Set="_callback.ResponseStatusCode = (int) VALUE;" },
  new {Key="owin.ResponseReasonPhrase", Type="string", Name="ResponseReasonPhrase", Get="null", Set="_callback.ResponseReasonPhase = (string) VALUE;" },
  new {Key="owin.ResponseHeaders", Type="IDictionary<string, string[]>", Name="ResponseHeaders", Get="_handler.RespHeaders", Set="_handler.OverwriteRespHeaders((IDictionary<string, string[]>) VALUE);" },
  new {Key="owin.ResponseBody", Type="Stream", Name="ResponseBody", Get="_callback.ReqRespBody", Set="" },
  
// ServerVariable keys
  new {Key="server.Capabilities", Type="IDictionary<string, object>", Name="ServerCapabilities", Get="_handler.Capabilities", Set="" },
  new {Key="server.OnSendingHeaders", Type="Action<Action<object>, object>", Name="OnSendingHeaders", Get="_handler.OnSendingHeadersAction", Set="" },
  new {Key="server.RemoteIpAddress", Type="string", Name="ServerRemoteIpAddress", Get="_callback.RemoteIpAddress", Set="" },
  new {Key="server.RemotePort", Type="string", Name="ServerRemotePort", Get="_callback.RemotePort", Set="" },
  new {Key="server.LocalIpAddress", Type="string", Name="ServerLocalIpAddress", Get="_callback.LocalIpAddress", Set="" },
  new {Key="server.LocalPort", Type="string", Name="ServerLocalPort", Get="_callback.LocalPort", Set="" },
  new {Key="server.IsLocal", Type="bool", Name="ServerIsLocal", Get="_callback.IsLocal", Set="" },

// WebSockets key
  new {Key="websocket.Accept", Type="WebSocketAccept", Name="WebSocketAcceptFunc", Get="_handler.WebSocketAcceptFunc", Set="" },
}.Select((prop, Index)=>new {prop.Key, prop.Type, prop.Name, prop.Get, prop.Set, Index});

var lengths = props.GroupBy(prop=>prop.Key.Length);

Func<int,string> IsSet = Index => "((_flag" + (Index / 32) + " & 0x" + (1<<(Index % 32)).ToString("x") + "u) != 0)";
Func<int,string> Set = Index => "_flag" + (Index / 32) + " |= 0x" + (1<<(Index % 32)).ToString("x") + "u";
Func<int,string> Clear = Index => "_flag" + (Index / 32) + " &= ~0x" + (1<<(Index % 32)).ToString("x") + "u";

Func<int,string> IsInitRequired = Index => "((_initFlag" + (Index / 32) + " & 0x" + (1<<(Index % 32)).ToString("x") + "u) != 0)";
Func<int,string> IsInitCompleted = Index => "((_initFlag" + (Index / 32) + " & 0x" + (1<<(Index % 32)).ToString("x") + "u) == 0)";
Func<int,string> CompleteInit = Index => "_initFlag" + (Index / 32) + " &= ~0x" + (1<<(Index % 32)).ToString("x") + "u";


#>
// Autogenerated. Do not edit.

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography.X509Certificates;
using System.Security.Principal;
using System.Threading;
using System.Threading.Tasks;

namespace Nowin
{
    using WebSocketAccept = Action<IDictionary<string, object>, Func<IDictionary<string, object>, Task>>;

    internal partial class OwinEnvironment
    {
        UInt32 _flag0;
        UInt32 _initFlag0;

<# foreach(var prop in props) { #>
        object _<#=prop.Name#>;
<# } #>

		void PropertiesReset()
		{
		    _flag0 = 0x<#=props.Aggregate(0, (agg,p) => agg | (1<<p.Index)).ToString("x")#>u;
			_initFlag0 = 0x<#=props.Aggregate(0, (agg,p) => agg | (1<<p.Index)).ToString("x")#>u;
<# foreach(var prop in props) { #>
		     _<#=prop.Name#> = null;
<# } #>
		}

<# foreach(var prop in props) { #>
        internal object <#=prop.Name#>
        {
            get
            {
                if (<#=IsInitRequired(prop.Index)#>)
                {
                    _<#=prop.Name#> = <#=prop.Get#>;
                    <#=CompleteInit(prop.Index)#>;
                }
                return _<#=prop.Name#>;
            }
            set
            {
                <#=CompleteInit(prop.Index)#>;
                <#=Set(prop.Index)#>;
                _<#=prop.Name#> = value;
<# if (prop.Set!="") { #>
                <#=prop.Set.Replace("VALUE", "value")#>
<# } #>
            }
        }

		internal void Remove<#=prop.Name#>()
		{
            <#=Clear(prop.Index)#>;
		}

<# } #>
        private bool PropertiesContainsKey(string key)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (<#=IsSet(prop.Index)#> && key=="<#=prop.Key#>")
                    {
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        private bool PropertiesTryGetValue(string key, out object value)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (<#=IsSet(prop.Index)#> && key=="<#=prop.Key#>")
                    {
                        value = <#=prop.Name#>;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            value = null;
            return false;
        }

        private bool PropertiesTrySetValue(string key, object value)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (key=="<#=prop.Key#>")
                    {
                        <#=prop.Name#> = value;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        private bool PropertiesTryRemove(string key)
        {
            switch (key.Length)
            {
<# foreach(var length in lengths) { #>
                case <#=length.Key#>:
<# foreach(var prop in length) { #>
                    if (<#=IsSet(prop.Index)#> && key=="<#=prop.Key#>")
                    {
                        <#=Clear(prop.Index)#>;
                        _<#=prop.Name#> = null;
                        return true;
                    }
<# } #>
                   break;
<# } #>
            }
            return false;
        }

        private IEnumerable<string> PropertiesKeys()
        {
<# foreach(var prop in props) { #>
            if (<#=IsSet(prop.Index)#>)
            {
                yield return "<#=prop.Key#>";
            }
<# } #>
        }

        private IEnumerable<object> PropertiesValues()
        {
<# foreach(var prop in props) { #>
            if (<#=IsSet(prop.Index)#>)
            {
                yield return <#=prop.Name#>;
            }
<# } #>
        }

        private IEnumerable<KeyValuePair<string, object>> PropertiesEnumerable()
        {
<# foreach(var prop in props) { #>
            if (<#=IsSet(prop.Index)#>)
            {
                yield return new KeyValuePair<string, object>("<#=prop.Key#>", <#=prop.Name#>);
            }
<# } #>
        }
    }
}
